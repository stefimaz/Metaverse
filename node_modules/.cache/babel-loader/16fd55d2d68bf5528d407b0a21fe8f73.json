{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nconst OrthographicCamera = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    makeDefault,\n    ...props\n  } = _ref;\n  const set = useThree(_ref2 => {\n    let {\n      set\n    } = _ref2;\n    return set;\n  });\n  const camera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  });\n  const size = useThree(_ref4 => {\n    let {\n      size\n    } = _ref4;\n    return size;\n  });\n  const cameraRef = React.useRef();\n  React.useLayoutEffect(() => {\n    if (cameraRef.current && !props.manual) {\n      cameraRef.current.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  React.useLayoutEffect(() => {\n    if (makeDefault && cameraRef.current) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cameraRef.current\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/React.createElement(\"orthographicCamera\", _extends({\n    left: size.width / -2,\n    right: size.width / 2,\n    top: size.height / 2,\n    bottom: size.height / -2,\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\nexport { OrthographicCamera };","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/@react-three/drei/core/OrthographicCamera.js"],"names":["_extends","React","useThree","mergeRefs","OrthographicCamera","forwardRef","ref","makeDefault","props","set","camera","size","cameraRef","useRef","useLayoutEffect","current","manual","updateProjectionMatrix","oldCam","createElement","left","width","right","top","height","bottom"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,MAAMC,kBAAkB,GAAG,aAAaH,KAAK,CAACI,UAAN,CAAiB,OAGtDC,GAHsD,KAG9C;AAAA,MAH+C;AACxDC,IAAAA,WADwD;AAExD,OAAGC;AAFqD,GAG/C;AACT,QAAMC,GAAG,GAAGP,QAAQ,CAAC;AAAA,QAAC;AACpBO,MAAAA;AADoB,KAAD;AAAA,WAEfA,GAFe;AAAA,GAAD,CAApB;AAGA,QAAMC,MAAM,GAAGR,QAAQ,CAAC;AAAA,QAAC;AACvBQ,MAAAA;AADuB,KAAD;AAAA,WAElBA,MAFkB;AAAA,GAAD,CAAvB;AAGA,QAAMC,IAAI,GAAGT,QAAQ,CAAC;AAAA,QAAC;AACrBS,MAAAA;AADqB,KAAD;AAAA,WAEhBA,IAFgB;AAAA,GAAD,CAArB;AAGA,QAAMC,SAAS,GAAGX,KAAK,CAACY,MAAN,EAAlB;AACAZ,EAAAA,KAAK,CAACa,eAAN,CAAsB,MAAM;AAC1B,QAAIF,SAAS,CAACG,OAAV,IAAqB,CAACP,KAAK,CAACQ,MAAhC,EAAwC;AACtCJ,MAAAA,SAAS,CAACG,OAAV,CAAkBE,sBAAlB;AACD;AACF,GAJD,EAIG,CAACN,IAAD,EAAOH,KAAP,CAJH;AAKAP,EAAAA,KAAK,CAACa,eAAN,CAAsB,MAAM;AAC1B,QAAIP,WAAW,IAAIK,SAAS,CAACG,OAA7B,EAAsC;AACpC,YAAMG,MAAM,GAAGR,MAAf;AACAD,MAAAA,GAAG,CAAC,OAAO;AACTC,QAAAA,MAAM,EAAEE,SAAS,CAACG;AADT,OAAP,CAAD,CAAH;AAGA,aAAO,MAAMN,GAAG,CAAC,OAAO;AACtBC,QAAAA,MAAM,EAAEQ;AADc,OAAP,CAAD,CAAhB;AAGD;AACF,GAVD,EAUG,CAACR,MAAD,EAASE,SAAT,EAAoBL,WAApB,EAAiCE,GAAjC,CAVH;AAWA,SAAO,aAAaR,KAAK,CAACkB,aAAN,CAAoB,oBAApB,EAA0CnB,QAAQ,CAAC;AACrEoB,IAAAA,IAAI,EAAET,IAAI,CAACU,KAAL,GAAa,CAAC,CADiD;AAErEC,IAAAA,KAAK,EAAEX,IAAI,CAACU,KAAL,GAAa,CAFiD;AAGrEE,IAAAA,GAAG,EAAEZ,IAAI,CAACa,MAAL,GAAc,CAHkD;AAIrEC,IAAAA,MAAM,EAAEd,IAAI,CAACa,MAAL,GAAc,CAAC,CAJ8C;AAKrElB,IAAAA,GAAG,EAAEH,SAAS,CAAC,CAACS,SAAD,EAAYN,GAAZ,CAAD;AALuD,GAAD,EAMnEE,KANmE,CAAlD,CAApB;AAOD,CArCuC,CAAxC;AAuCA,SAASJ,kBAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst OrthographicCamera = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  ...props\n}, ref) => {\n  const set = useThree(({\n    set\n  }) => set);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const size = useThree(({\n    size\n  }) => size);\n  const cameraRef = React.useRef();\n  React.useLayoutEffect(() => {\n    if (cameraRef.current && !props.manual) {\n      cameraRef.current.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  React.useLayoutEffect(() => {\n    if (makeDefault && cameraRef.current) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cameraRef.current\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/React.createElement(\"orthographicCamera\", _extends({\n    left: size.width / -2,\n    right: size.width / 2,\n    top: size.height / 2,\n    bottom: size.height / -2,\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\n\nexport { OrthographicCamera };\n"]},"metadata":{},"sourceType":"module"}