{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineNameProp = exports.functionName = exports.classNameFromInstance = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nfunction classNameFromInstance(instance) {\n  return functionName(instance.constructor);\n}\n\nexports.classNameFromInstance = classNameFromInstance;\nvar NAME = \"name\";\n/**\n * Utility to obtain Function names.\n * Note that there should not be an assumptions on the result of this function.\n * E.g: When running from minified source code the result may be auto generated.\n */\n\nfunction functionName(func) {\n  // Engines that support Function.prototype.name OR the nth (n>1) time after\n  // the name has been computed in the following else block.\n  var existingNameProp = func.name;\n  /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/\n\n  if (existingNameProp) {\n    return existingNameProp;\n  } else {\n    return \"anonymous\";\n  }\n}\n\nexports.functionName = functionName;\n/**\n * @returns {boolean} - has the property been successfully defined\n */\n\nfunction defineNameProp(obj, nameValue) {\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n  /* istanbul ignore else -> will only run in old versions of node.js */\n\n  if ((0, utils_1.isUndefined)(namePropDescriptor) || namePropDescriptor.configurable) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    });\n    return true;\n  }\n  /* istanbul ignore next -> will only run in old versions of node.js */\n\n\n  return false;\n}\n\nexports.defineNameProp = defineNameProp;","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA,SAAgBA,qBAAhB,CAAsCC,QAAtC,EAAmD;AACjD,SAAOC,YAAY,CAACD,QAAQ,CAACE,WAAV,CAAnB;AACD;;AAFDC;AAIA,IAAMC,IAAI,GAAG,MAAb;AAEA;;;;;;AAKA,SAAgBH,YAAhB,CAA6BI,IAA7B,EAA4C;AAC1C;AACA;AACA,MAAMC,gBAAgB,GAASD,IAAK,CAACE,IAArC;AACA;;AACA,MAAID,gBAAJ,EAAsB;AACpB,WAAOA,gBAAP;AACD,GAFD,MAEO;AACL,WAAO,WAAP;AACD;AACF;;AAVDH;AAYA;;;;AAGA,SAAgBK,cAAhB,CAA+BC,GAA/B,EAAoCC,SAApC,EAA6C;AAC3C,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,wBAAP,CAAgCJ,GAAhC,EAAqCL,IAArC,CAA3B;AACA;;AACA,MAAI,yBAAYO,kBAAZ,KAAmCA,kBAAkB,CAACG,YAA1D,EAAwE;AACtEF,UAAM,CAACG,cAAP,CAAsBN,GAAtB,EAA2BL,IAA3B,EAAiC;AAC/BY,gBAAU,EAAE,KADmB;AAE/BF,kBAAY,EAAE,IAFiB;AAG/BG,cAAQ,EAAE,KAHqB;AAI/BC,WAAK,EAAER;AAJwB,KAAjC;AAOA,WAAO,IAAP;AACD;AACD;;;AACA,SAAO,KAAP;AACD;;AAfDP","names":["classNameFromInstance","instance","functionName","constructor","exports","NAME","func","existingNameProp","name","defineNameProp","obj","nameValue","namePropDescriptor","Object","getOwnPropertyDescriptor","configurable","defineProperty","enumerable","writable","value"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/lang/lang_extensions.ts"],"sourcesContent":["import { TokenType } from \"@chevrotain/types\"\nimport { isUndefined } from \"@chevrotain/utils\"\n\nexport function classNameFromInstance(instance: any): string {\n  return functionName(instance.constructor)\n}\n\nconst NAME = \"name\"\n\n/**\n * Utility to obtain Function names.\n * Note that there should not be an assumptions on the result of this function.\n * E.g: When running from minified source code the result may be auto generated.\n */\nexport function functionName(func: TokenType): string {\n  // Engines that support Function.prototype.name OR the nth (n>1) time after\n  // the name has been computed in the following else block.\n  const existingNameProp = (<any>func).name\n  /* istanbul ignore else - too many hacks for IE/old versions of node.js here*/\n  if (existingNameProp) {\n    return existingNameProp\n  } else {\n    return \"anonymous\"\n  }\n}\n\n/**\n * @returns {boolean} - has the property been successfully defined\n */\nexport function defineNameProp(obj, nameValue): boolean {\n  const namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME)\n  /* istanbul ignore else -> will only run in old versions of node.js */\n  if (isUndefined(namePropDescriptor) || namePropDescriptor.configurable) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    })\n\n    return true\n  }\n  /* istanbul ignore next -> will only run in old versions of node.js */\n  return false\n}\n"]},"metadata":{},"sourceType":"script"}