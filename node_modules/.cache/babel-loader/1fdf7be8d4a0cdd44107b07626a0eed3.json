{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { FloatType, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\nconst CUBEMAP_ROOT = 'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\n\nfunction Environment(_ref) {\n  let {\n    background = false,\n    files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n    path = '',\n    preset = undefined,\n    scene,\n    extensions\n  } = _ref;\n\n  if (preset) {\n    if (!(preset in presetsObj)) {\n      throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    }\n\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT + '/hdri/';\n  }\n\n  const defaultScene = useThree(_ref2 => {\n    let {\n      scene\n    } = _ref2;\n    return scene;\n  });\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader; // @ts-expect-error\n\n  const loaderResult = useLoader(loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path); // @ts-expect-error\n\n    loader.setDataType == null ? void 0 : loader.setDataType(FloatType);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ? loaderResult[0] : loaderResult;\n  texture.mapping = EquirectangularReflectionMapping;\n  React.useLayoutEffect(() => {\n    const oldbg = scene ? scene.background : defaultScene.background;\n    const oldenv = scene ? scene.environment : defaultScene.environment;\n\n    if (scene) {\n      scene.environment = texture;\n      if (background) scene.background = texture;\n    } else {\n      defaultScene.environment = texture;\n      if (background) defaultScene.background = texture;\n    }\n\n    return () => {\n      if (scene) {\n        scene.environment = oldenv;\n        scene.background = oldbg;\n      } else {\n        defaultScene.environment = oldenv;\n        defaultScene.background = oldbg;\n      } // Environment textures are volatile, better dispose and uncache them\n\n\n      texture.dispose();\n    };\n  }, [texture, background, scene]);\n  return null;\n}\n\nexport { Environment };","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/@react-three/drei/core/Environment.js"],"names":["React","useThree","useLoader","FloatType","EquirectangularReflectionMapping","CubeTextureLoader","RGBELoader","presetsObj","CUBEMAP_ROOT","Environment","background","files","path","preset","undefined","scene","extensions","Error","Object","keys","join","defaultScene","isCubeMap","Array","isArray","loader","loaderResult","setPath","setDataType","texture","mapping","useLayoutEffect","oldbg","oldenv","environment","dispose"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { FloatType, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { RGBELoader } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nconst CUBEMAP_ROOT = 'https://rawcdn.githack.com/pmndrs/drei-assets/aa3600359ba664d546d05821bcbca42013587df2';\nfunction Environment({\n  background = false,\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  scene,\n  extensions\n}) {\n  if (preset) {\n    if (!(preset in presetsObj)) {\n      throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    }\n\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT + '/hdri/';\n  }\n\n  const defaultScene = useThree(({\n    scene\n  }) => scene);\n  const isCubeMap = Array.isArray(files);\n  const loader = isCubeMap ? CubeTextureLoader : RGBELoader; // @ts-expect-error\n\n  const loaderResult = useLoader(loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath(path); // @ts-expect-error\n\n    loader.setDataType == null ? void 0 : loader.setDataType(FloatType);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ? loaderResult[0] : loaderResult;\n  texture.mapping = EquirectangularReflectionMapping;\n  React.useLayoutEffect(() => {\n    const oldbg = scene ? scene.background : defaultScene.background;\n    const oldenv = scene ? scene.environment : defaultScene.environment;\n\n    if (scene) {\n      scene.environment = texture;\n      if (background) scene.background = texture;\n    } else {\n      defaultScene.environment = texture;\n      if (background) defaultScene.background = texture;\n    }\n\n    return () => {\n      if (scene) {\n        scene.environment = oldenv;\n        scene.background = oldbg;\n      } else {\n        defaultScene.environment = oldenv;\n        defaultScene.background = oldbg;\n      } // Environment textures are volatile, better dispose and uncache them\n\n\n      texture.dispose();\n    };\n  }, [texture, background, scene]);\n  return null;\n}\n\nexport { Environment };\n"]},"metadata":{},"sourceType":"module"}