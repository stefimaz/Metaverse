{"ast":null,"code":"var _jsxFileName = \"/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/src/components/Building.js\",\n    _s = $RefreshSig$();\n\nimport { TextureLoader } from 'three';\nimport { useLoader } from '@react-three/fiber'; // Import Assets\n\nimport MetalMap from '../assets/MetalMap.png';\nimport MetalNormalMap from '../assets/MetalNormalMap.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Building = _ref => {\n  _s();\n\n  let {\n    position,\n    size,\n    landId,\n    landInfo,\n    setLandName,\n    setLandOwner,\n    setHasOwner,\n    setLandId\n  } = _ref;\n  const [surface, color] = useLoader(TextureLoader, [MetalNormalMap, MetalMap]);\n\n  const clickHandler = () => {\n    setLandName(landInfo.name);\n    setLandId(landId);\n\n    if (landInfo.owner === '0x0000000000000000000000000000000000000000') {\n      setLandOwner('No Owner');\n      setHasOwner(false);\n    } else {\n      setLandOwner(landInfo.owner);\n      setHasOwner(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: position,\n    onClick: clickHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: size\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: color,\n      normalMap: surface,\n      metalness: 0.25\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Building, \"fSY1Z25IsJVwBamK614CF/xVwGk=\", false, function () {\n  return [useLoader];\n});\n\n_c = Building;\nexport default Building;\n\nvar _c;\n\n$RefreshReg$(_c, \"Building\");","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/src/components/Building.js"],"names":["TextureLoader","useLoader","MetalMap","MetalNormalMap","Building","position","size","landId","landInfo","setLandName","setLandOwner","setHasOwner","setLandId","surface","color","clickHandler","name","owner"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,SAAT,QAA0B,oBAA1B,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;;AAEA,MAAMC,QAAQ,GAAG,QAA6F;AAAA;;AAAA,MAA5F;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA,MAAlB;AAA0BC,IAAAA,QAA1B;AAAoCC,IAAAA,WAApC;AAAiDC,IAAAA,YAAjD;AAA+DC,IAAAA,WAA/D;AAA4EC,IAAAA;AAA5E,GAA4F;AAC1G,QAAM,CAACC,OAAD,EAAUC,KAAV,IAAmBb,SAAS,CAACD,aAAD,EAAgB,CAACG,cAAD,EAAiBD,QAAjB,CAAhB,CAAlC;;AAEA,QAAMa,YAAY,GAAG,MAAM;AACvBN,IAAAA,WAAW,CAACD,QAAQ,CAACQ,IAAV,CAAX;AACAJ,IAAAA,SAAS,CAACL,MAAD,CAAT;;AAEA,QAAIC,QAAQ,CAACS,KAAT,KAAmB,4CAAvB,EAAqE;AACjEP,MAAAA,YAAY,CAAC,UAAD,CAAZ;AACAC,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH,KAHD,MAGO;AACHD,MAAAA,YAAY,CAACF,QAAQ,CAACS,KAAV,CAAZ;AACAN,MAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ,GAXD;;AAaA,sBACI;AAAM,IAAA,QAAQ,EAAEN,QAAhB;AAA0B,IAAA,OAAO,EAAEU,YAAnC;AAAA,4BACI;AAAmB,MAAA,IAAI,EAAET;AAAzB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAsB,MAAA,GAAG,EAAEQ,KAA3B;AAAkC,MAAA,SAAS,EAAED,OAA7C;AAAsD,MAAA,SAAS,EAAE;AAAjE;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAtBD;;GAAMT,Q;UACuBH,S;;;KADvBG,Q;AAwBN,eAAeA,QAAf","sourcesContent":["import { TextureLoader } from 'three';\nimport { useLoader } from '@react-three/fiber';\n\n// Import Assets\nimport MetalMap from '../assets/MetalMap.png';\nimport MetalNormalMap from '../assets/MetalNormalMap.png';\n\nconst Building = ({ position, size, landId, landInfo, setLandName, setLandOwner, setHasOwner, setLandId }) => {\n    const [surface, color] = useLoader(TextureLoader, [MetalNormalMap, MetalMap])\n\n    const clickHandler = () => {\n        setLandName(landInfo.name)\n        setLandId(landId)\n\n        if (landInfo.owner === '0x0000000000000000000000000000000000000000') {\n            setLandOwner('No Owner')\n            setHasOwner(false)\n        } else {\n            setLandOwner(landInfo.owner)\n            setHasOwner(true)\n        }\n    }\n\n    return (\n        <mesh position={position} onClick={clickHandler}>\n            <boxBufferGeometry args={size} />\n            <meshStandardMaterial map={color} normalMap={surface} metalness={0.25} />\n        </mesh>\n    );\n}\n\nexport default Building;"]},"metadata":{},"sourceType":"module"}