{"ast":null,"code":"import { registerAction, dragAction, pinchAction, wheelAction, scrollAction, moveAction, hoverAction } from '@use-gesture/core/actions';\nexport * from '@use-gesture/core/actions';\nimport React from 'react';\nimport { Controller, parseMergedHandlers } from '@use-gesture/core';\nexport * from '@use-gesture/core/utils';\nexport * from '@use-gesture/core/types';\n\nfunction useRecognizers(handlers) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let gestureKey = arguments.length > 2 ? arguments[2] : undefined;\n  let nativeHandlers = arguments.length > 3 ? arguments[3] : undefined;\n  const ctrl = React.useMemo(() => new Controller(handlers), []);\n  ctrl.applyHandlers(handlers, nativeHandlers);\n  ctrl.applyConfig(config, gestureKey);\n  React.useEffect(ctrl.effect.bind(ctrl));\n  React.useEffect(() => {\n    return ctrl.clean.bind(ctrl);\n  }, []);\n\n  if (config.target === undefined) {\n    return ctrl.bind.bind(ctrl);\n  }\n\n  return undefined;\n}\n\nfunction useDrag(handler) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  registerAction(dragAction);\n  return useRecognizers({\n    drag: handler\n  }, config, 'drag');\n}\n\nfunction usePinch(handler) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  registerAction(pinchAction);\n  return useRecognizers({\n    pinch: handler\n  }, config, 'pinch');\n}\n\nfunction useWheel(handler) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  registerAction(wheelAction);\n  return useRecognizers({\n    wheel: handler\n  }, config, 'wheel');\n}\n\nfunction useScroll(handler) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  registerAction(scrollAction);\n  return useRecognizers({\n    scroll: handler\n  }, config, 'scroll');\n}\n\nfunction useMove(handler) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  registerAction(moveAction);\n  return useRecognizers({\n    move: handler\n  }, config, 'move');\n}\n\nfunction useHover(handler) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  registerAction(hoverAction);\n  return useRecognizers({\n    hover: handler\n  }, config, 'hover');\n}\n\nfunction createUseGesture(actions) {\n  actions.forEach(registerAction);\n  return function useGesture(_handlers) {\n    let _config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    const {\n      handlers,\n      nativeHandlers,\n      config\n    } = parseMergedHandlers(_handlers, _config);\n    return useRecognizers(handlers, config, undefined, nativeHandlers);\n  };\n}\n\nfunction useGesture(handlers) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);\n  return hook(handlers, config);\n}\n\nexport { createUseGesture, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/@use-gesture/react/dist/use-gesture-react.esm.js"],"names":["registerAction","dragAction","pinchAction","wheelAction","scrollAction","moveAction","hoverAction","React","Controller","parseMergedHandlers","useRecognizers","handlers","config","gestureKey","nativeHandlers","ctrl","useMemo","applyHandlers","applyConfig","useEffect","effect","bind","clean","target","undefined","useDrag","handler","drag","usePinch","pinch","useWheel","wheel","useScroll","scroll","useMove","move","useHover","hover","createUseGesture","actions","forEach","useGesture","_handlers","_config","hook"],"mappings":"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","sourcesContent":["import { registerAction, dragAction, pinchAction, wheelAction, scrollAction, moveAction, hoverAction } from '@use-gesture/core/actions';\nexport * from '@use-gesture/core/actions';\nimport React from 'react';\nimport { Controller, parseMergedHandlers } from '@use-gesture/core';\nexport * from '@use-gesture/core/utils';\nexport * from '@use-gesture/core/types';\n\nfunction useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {\n  const ctrl = React.useMemo(() => new Controller(handlers), []);\n  ctrl.applyHandlers(handlers, nativeHandlers);\n  ctrl.applyConfig(config, gestureKey);\n  React.useEffect(ctrl.effect.bind(ctrl));\n  React.useEffect(() => {\n    return ctrl.clean.bind(ctrl);\n  }, []);\n\n  if (config.target === undefined) {\n    return ctrl.bind.bind(ctrl);\n  }\n\n  return undefined;\n}\n\nfunction useDrag(handler, config = {}) {\n  registerAction(dragAction);\n  return useRecognizers({\n    drag: handler\n  }, config, 'drag');\n}\n\nfunction usePinch(handler, config = {}) {\n  registerAction(pinchAction);\n  return useRecognizers({\n    pinch: handler\n  }, config, 'pinch');\n}\n\nfunction useWheel(handler, config = {}) {\n  registerAction(wheelAction);\n  return useRecognizers({\n    wheel: handler\n  }, config, 'wheel');\n}\n\nfunction useScroll(handler, config = {}) {\n  registerAction(scrollAction);\n  return useRecognizers({\n    scroll: handler\n  }, config, 'scroll');\n}\n\nfunction useMove(handler, config = {}) {\n  registerAction(moveAction);\n  return useRecognizers({\n    move: handler\n  }, config, 'move');\n}\n\nfunction useHover(handler, config = {}) {\n  registerAction(hoverAction);\n  return useRecognizers({\n    hover: handler\n  }, config, 'hover');\n}\n\nfunction createUseGesture(actions) {\n  actions.forEach(registerAction);\n  return function useGesture(_handlers, _config = {}) {\n    const {\n      handlers,\n      nativeHandlers,\n      config\n    } = parseMergedHandlers(_handlers, _config);\n    return useRecognizers(handlers, config, undefined, nativeHandlers);\n  };\n}\n\nfunction useGesture(handlers, config = {}) {\n  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);\n  return hook(handlers, config);\n}\n\nexport { createUseGesture, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };\n"]},"metadata":{},"sourceType":"module"}