{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;        \n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n      \n      vec4 merge = base;\n      \n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n  \n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n      \n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);           \n      \n      if (debug == 1) {\n        diffuseColor = vec4(vec3(depthFactor), 1.0);\n      }\n      if (debug == 2) {\n        diffuseColor = vec4(vec3(blurFactor), 1.0);\n      }\n      if (debug == 3) {\n        diffuseColor = texture2DProj(tDiffuse, new_vUv);\n      }\n      if (debug == 4) {\n        diffuseColor = texture2DProj(tDiffuseBlur, new_vUv);\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"names":["MeshStandardMaterial","MeshReflectorMaterial","constructor","parameters","_debug","value","_tDepth","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","debug","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","mixContrast","vertexShader","replace","fragmentShader","v"],"mappings":"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EAA0D;AACpF;AACA,kFAF0B,CAAtB;AAGAtB,IAAAA,MAAM,CAACuB,cAAP,GAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUvB,MAAM,CAACuB,cAAe,EAnB5B;AAoBAvB,IAAAA,MAAM,CAACuB,cAAP,GAAwBvB,MAAM,CAACuB,cAAP,CAAsBD,OAAtB,CAA8B,iCAA9B,EAAkE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA5E4B,CAAxB;AA6ED;;AAEW,MAARf,QAAQ,GAAG;AACb,WAAO,KAAKtB,SAAL,CAAeH,KAAtB;AACD;;AAEW,MAARyB,QAAQ,CAACiB,CAAD,EAAI;AACd,SAAKvC,SAAL,CAAeH,KAAf,GAAuB0C,CAAvB;AACD;;AAES,MAANhB,MAAM,GAAG;AACX,WAAO,KAAKzB,OAAL,CAAaD,KAApB;AACD;;AAES,MAAN0B,MAAM,CAACgB,CAAD,EAAI;AACZ,SAAKzC,OAAL,CAAaD,KAAb,GAAqB0C,CAArB;AACD;;AAEgB,MAAbf,aAAa,GAAG;AAClB,WAAO,KAAKzB,cAAL,CAAoBF,KAA3B;AACD;;AAEgB,MAAb2B,aAAa,CAACe,CAAD,EAAI;AACnB,SAAKxC,cAAL,CAAoBF,KAApB,GAA4B0C,CAA5B;AACD;;AAEe,MAAZd,YAAY,GAAG;AACjB,WAAO,KAAKxB,aAAL,CAAmBJ,KAA1B;AACD;;AAEe,MAAZ4B,YAAY,CAACc,CAAD,EAAI;AAClB,SAAKtC,aAAL,CAAmBJ,KAAnB,GAA2B0C,CAA3B;AACD;;AAEgB,MAAbb,aAAa,GAAG;AAClB,WAAO,KAAKxB,cAAL,CAAoBL,KAA3B;AACD;;AAEgB,MAAb6B,aAAa,CAACa,CAAD,EAAI;AACnB,SAAKrC,cAAL,CAAoBL,KAApB,GAA4B0C,CAA5B;AACD;;AAEU,MAAPlB,OAAO,GAAG;AACZ,WAAO,KAAKlB,QAAL,CAAcN,KAArB;AACD;;AAEU,MAAPwB,OAAO,CAACkB,CAAD,EAAI;AACb,SAAKpC,QAAL,CAAcN,KAAd,GAAsB0C,CAAtB;AACD;;AAES,MAANZ,MAAM,GAAG;AACX,WAAO,KAAKvB,OAAL,CAAaP,KAApB;AACD;;AAES,MAAN8B,MAAM,CAACY,CAAD,EAAI;AACZ,SAAKnC,OAAL,CAAaP,KAAb,GAAqB0C,CAArB;AACD;;AAEU,MAAPX,OAAO,GAAG;AACZ,WAAO,KAAKvB,QAAL,CAAcR,KAArB;AACD;;AAEU,MAAP+B,OAAO,CAACW,CAAD,EAAI;AACb,SAAKlC,QAAL,CAAcR,KAAd,GAAsB0C,CAAtB;AACD;;AAEc,MAAXV,WAAW,GAAG;AAChB,WAAO,KAAKvB,aAAL,CAAmBT,KAA1B;AACD;;AAEc,MAAXgC,WAAW,CAACU,CAAD,EAAI;AACjB,SAAKjC,aAAL,CAAmBT,KAAnB,GAA2B0C,CAA3B;AACD;;AAEoB,MAAjBT,iBAAiB,GAAG;AACtB,WAAO,KAAKvB,kBAAL,CAAwBV,KAA/B;AACD;;AAEoB,MAAjBiC,iBAAiB,CAACS,CAAD,EAAI;AACvB,SAAKhC,kBAAL,CAAwBV,KAAxB,GAAgC0C,CAAhC;AACD;;AAEoB,MAAjBR,iBAAiB,GAAG;AACtB,WAAO,KAAKvB,kBAAL,CAAwBX,KAA/B;AACD;;AAEoB,MAAjBkC,iBAAiB,CAACQ,CAAD,EAAI;AACvB,SAAK/B,kBAAL,CAAwBX,KAAxB,GAAgC0C,CAAhC;AACD;;AAEa,MAAVP,UAAU,GAAG;AACf,WAAO,KAAKvB,WAAL,CAAiBZ,KAAxB;AACD;;AAEa,MAAVmC,UAAU,CAACO,CAAD,EAAI;AAChB,SAAK9B,WAAL,CAAiBZ,KAAjB,GAAyB0C,CAAzB;AACD;;AAEQ,MAALnB,KAAK,GAAG;AACV,WAAO,KAAKxB,MAAL,CAAYC,KAAnB;AACD;;AAEQ,MAALuB,KAAK,CAACmB,CAAD,EAAI;AACX,SAAK3C,MAAL,CAAYC,KAAZ,GAAoB0C,CAApB;AACD;;AAEuB,MAApBN,oBAAoB,GAAG;AACzB,WAAO,KAAKvB,qBAAL,CAA2Bb,KAAlC;AACD;;AAEuB,MAApBoC,oBAAoB,CAACM,CAAD,EAAI;AAC1B,SAAK7B,qBAAL,CAA2Bb,KAA3B,GAAmC0C,CAAnC;AACD;;AAEa,MAAVL,UAAU,GAAG;AACf,WAAO,KAAKvB,WAAL,CAAiBd,KAAxB;AACD;;AAEa,MAAVqC,UAAU,CAACK,CAAD,EAAI;AAChB,SAAK5B,WAAL,CAAiBd,KAAjB,GAAyB0C,CAAzB;AACD;;AAEc,MAAXJ,WAAW,GAAG;AAChB,WAAO,KAAKvB,YAAL,CAAkBf,KAAzB;AACD;;AAEc,MAAXsC,WAAW,CAACI,CAAD,EAAI;AACjB,SAAK3B,YAAL,CAAkBf,KAAlB,GAA0B0C,CAA1B;AACD;;AArTsD;;AAyTzD,SAAS9C,qBAAT","sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._debug = {\n      value: 0\n    };\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;        \n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n      \n      vec4 merge = base;\n      \n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n  \n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n      \n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);           \n      \n      if (debug == 1) {\n        diffuseColor = vec4(vec3(depthFactor), 1.0);\n      }\n      if (debug == 2) {\n        diffuseColor = vec4(vec3(blurFactor), 1.0);\n      }\n      if (debug == 3) {\n        diffuseColor = texture2DProj(tDiffuse, new_vUv);\n      }\n      if (debug == 4) {\n        diffuseColor = texture2DProj(tDiffuseBlur, new_vUv);\n      }\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}