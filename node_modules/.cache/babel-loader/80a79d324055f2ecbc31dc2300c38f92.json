{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Lexer = exports.LexerDefinitionErrorType = void 0;\n\nvar lexer_1 = require(\"./lexer\");\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar tokens_1 = require(\"./tokens\");\n\nvar lexer_errors_public_1 = require(\"../scan/lexer_errors_public\");\n\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\n\nvar LexerDefinitionErrorType;\n\n(function (LexerDefinitionErrorType) {\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType = exports.LexerDefinitionErrorType || (exports.LexerDefinitionErrorType = {}));\n\nvar DEFAULT_LEXER_CONFIG = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: lexer_errors_public_1.defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nvar Lexer =\n/** @class */\nfunction () {\n  function Lexer(lexerDefinition, config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = DEFAULT_LEXER_CONFIG;\n    }\n\n    this.lexerDefinition = lexerDefinition;\n    this.lexerDefinitionErrors = [];\n    this.lexerDefinitionWarning = [];\n    this.patternIdxToConfig = {};\n    this.charCodeToPatternIdxToConfig = {};\n    this.modes = [];\n    this.emptyGroups = {};\n    this.config = undefined;\n    this.trackStartLines = true;\n    this.trackEndLines = true;\n    this.hasCustom = false;\n    this.canModeBeOptimized = {};\n\n    if (typeof config === \"boolean\") {\n      throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" + \"a boolean 2nd argument is no longer supported\");\n    } // todo: defaults func?\n\n\n    this.config = (0, utils_1.merge)(DEFAULT_LEXER_CONFIG, config);\n    var traceInitVal = this.config.traceInitPerf;\n\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n\n    this.traceInitIndent = -1;\n    this.TRACE_INIT(\"Lexer Constructor\", function () {\n      var actualDefinition;\n      var hasOnlySingleMode = true;\n\n      _this.TRACE_INIT(\"Lexer Config handling\", function () {\n        if (_this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          _this.config.lineTerminatorsPattern = lexer_1.LineTerminatorOptimizedTester;\n        } else {\n          if (_this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n            throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n        }\n\n        _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n        _this.trackEndLines = /full/i.test(_this.config.positionTracking); // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n\n        if ((0, utils_1.isArray)(lexerDefinition)) {\n          actualDefinition = {\n            modes: {}\n          };\n          actualDefinition.modes[lexer_1.DEFAULT_MODE] = (0, utils_1.cloneArr)(lexerDefinition);\n          actualDefinition[lexer_1.DEFAULT_MODE] = lexer_1.DEFAULT_MODE;\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = (0, utils_1.cloneObj)(lexerDefinition);\n        }\n      });\n\n      if (_this.config.skipValidations === false) {\n        _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n          _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat((0, lexer_1.performRuntimeChecks)(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n\n        _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n          _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat((0, lexer_1.performWarningRuntimeChecks)(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n      } // for extra robustness to avoid throwing an none informative error message\n\n\n      actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {}; // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n\n      (0, utils_1.forEach)(actualDefinition.modes, function (currModeValue, currModeName) {\n        actualDefinition.modes[currModeName] = (0, utils_1.reject)(currModeValue, function (currTokType) {\n          return (0, utils_1.isUndefined)(currTokType);\n        });\n      });\n      var allModeNames = (0, utils_1.keys)(actualDefinition.modes);\n      (0, utils_1.forEach)(actualDefinition.modes, function (currModDef, currModName) {\n        _this.TRACE_INIT(\"Mode: <\" + currModName + \"> processing\", function () {\n          _this.modes.push(currModName);\n\n          if (_this.config.skipValidations === false) {\n            _this.TRACE_INIT(\"validatePatterns\", function () {\n              _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat((0, lexer_1.validatePatterns)(currModDef, allModeNames));\n            });\n          } // If definition errors were encountered, the analysis phase may fail unexpectedly/\n          // Considering a lexer with definition errors may never be used, there is no point\n          // to performing the analysis anyhow...\n\n\n          if ((0, utils_1.isEmpty)(_this.lexerDefinitionErrors)) {\n            (0, tokens_1.augmentTokenTypes)(currModDef);\n            var currAnalyzeResult_1;\n\n            _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n              currAnalyzeResult_1 = (0, lexer_1.analyzeTokenTypes)(currModDef, {\n                lineTerminatorCharacters: _this.config.lineTerminatorCharacters,\n                positionTracking: config.positionTracking,\n                ensureOptimizations: config.ensureOptimizations,\n                safeMode: config.safeMode,\n                tracer: _this.TRACE_INIT.bind(_this)\n              });\n            });\n\n            _this.patternIdxToConfig[currModName] = currAnalyzeResult_1.patternIdxToConfig;\n            _this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n            _this.emptyGroups = (0, utils_1.merge)(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n            _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;\n            _this.canModeBeOptimized[currModName] = currAnalyzeResult_1.canBeOptimized;\n          }\n        });\n      });\n      _this.defaultMode = actualDefinition.defaultMode;\n\n      if (!(0, utils_1.isEmpty)(_this.lexerDefinitionErrors) && !_this.config.deferDefinitionErrorsHandling) {\n        var allErrMessages = (0, utils_1.map)(_this.lexerDefinitionErrors, function (error) {\n          return error.message;\n        });\n        var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      } // Only print warning if there are no errors, This will avoid pl\n\n\n      (0, utils_1.forEach)(_this.lexerDefinitionWarning, function (warningDescriptor) {\n        (0, utils_1.PRINT_WARNING)(warningDescriptor.message);\n      });\n\n      _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (lexer_1.SUPPORT_STICKY) {\n          _this.chopInput = utils_1.IDENTITY;\n          _this.match = _this.matchWithTest;\n        } else {\n          _this.updateLastIndex = utils_1.NOOP;\n          _this.match = _this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          _this.handleModes = utils_1.NOOP;\n        }\n\n        if (_this.trackStartLines === false) {\n          _this.computeNewColumn = utils_1.IDENTITY;\n        }\n\n        if (_this.trackEndLines === false) {\n          _this.updateTokenEndLineColumnLocation = utils_1.NOOP;\n        }\n\n        if (/full/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createFullToken;\n        } else if (/onlyStart/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createOffsetOnlyToken;\n        } else {\n          throw Error(\"Invalid <positionTracking> config option: \\\"\" + _this.config.positionTracking + \"\\\"\");\n        }\n\n        if (_this.hasCustom) {\n          _this.addToken = _this.addTokenUsingPush;\n          _this.handlePayload = _this.handlePayloadWithCustom;\n        } else {\n          _this.addToken = _this.addTokenUsingMemberAccess;\n          _this.handlePayload = _this.handlePayloadNoCustom;\n        }\n      });\n\n      _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n        var unOptimizedModes = (0, utils_1.reduce)(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n          if (canBeOptimized === false) {\n            cannotBeOptimized.push(modeName);\n          }\n\n          return cannotBeOptimized;\n        }, []);\n\n        if (config.ensureOptimizations && !(0, utils_1.isEmpty)(unOptimizedModes)) {\n          throw Error(\"Lexer Modes: < \" + unOptimizedModes.join(\", \") + \" > cannot be optimized.\\n\" + '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' + \"\\t Or inspect the console log for details on how to resolve these issues.\");\n        }\n      });\n\n      _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n        (0, reg_exp_parser_1.clearRegExpParserCache)();\n      });\n\n      _this.TRACE_INIT(\"toFastProperties\", function () {\n        (0, utils_1.toFastProperties)(_this);\n      });\n    });\n  }\n\n  Lexer.prototype.tokenize = function (text, initialMode) {\n    if (initialMode === void 0) {\n      initialMode = this.defaultMode;\n    }\n\n    if (!(0, utils_1.isEmpty)(this.lexerDefinitionErrors)) {\n      var allErrMessages = (0, utils_1.map)(this.lexerDefinitionErrors, function (error) {\n        return error.message;\n      });\n      var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n      throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n    }\n\n    var lexResult = this.tokenizeInternal(text, initialMode);\n    return lexResult;\n  }; // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n\n\n  Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n    var _this = this;\n\n    var i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n    var orgText = text;\n    var orgLength = orgText.length;\n    var offset = 0;\n    var matchedTokensIndex = 0; // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n\n    var guessedNumberOfTokens = this.hasCustom ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n    : Math.floor(text.length / 10);\n    var matchedTokens = new Array(guessedNumberOfTokens);\n    var errors = [];\n    var line = this.trackStartLines ? 1 : undefined;\n    var column = this.trackStartLines ? 1 : undefined;\n    var groups = (0, lexer_1.cloneEmptyGroups)(this.emptyGroups);\n    var trackLines = this.trackStartLines;\n    var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n    var currModePatternsLength = 0;\n    var patternIdxToConfig = [];\n    var currCharCodeToPatternIdxToConfig = [];\n    var modeStack = [];\n    var emptyArray = [];\n    Object.freeze(emptyArray);\n    var getPossiblePatterns = undefined;\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode) {\n      var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(charCode);\n      var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    var pop_mode = function (popToken) {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (modeStack.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n      // So no error should occur.\n      popToken.tokenType.PUSH_MODE === undefined) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine !== undefined ? popToken.startLine : undefined,\n          column: popToken.startColumn !== undefined ? popToken.startColumn : undefined,\n          length: popToken.image.length,\n          message: msg_1\n        });\n      } else {\n        modeStack.pop();\n        var newMode = (0, utils_1.last)(modeStack);\n        patternIdxToConfig = _this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(newMode) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n      currModePatternsLength = patternIdxToConfig.length;\n      var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    } // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n\n\n    push_mode.call(this, initialMode);\n    var currConfig;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n      var nextCharCode = orgText.charCodeAt(offset);\n      var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      var chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        var currPattern = currConfig.pattern;\n        payload = null; // manually in-lined because > 600 chars won't be in-lined in V8\n\n        var singleCharCode = currConfig.short;\n\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = currPattern.exec(orgText, offset, matchedTokens, groups);\n\n          if (match !== null) {\n            matchedImage = match[0];\n\n            if (match.payload !== undefined) {\n              payload = match.payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern, offset);\n          matchedImage = this.match(currPattern, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            var longerAltLength = longerAlt.length;\n\n            for (k = 0; k < longerAltLength; k++) {\n              var longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              var longerAltPattern = longerAltConfig.pattern;\n              altPayload = null; // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n\n              if (longerAltConfig.isCustom === true) {\n                match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n\n                if (match !== null) {\n                  matchAltImage = match[0];\n\n                  if (match.payload !== undefined) {\n                    altPayload = match.payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern, offset);\n                matchAltImage = this.match(longerAltPattern, text, offset);\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig; // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      } // successful match\n\n\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx; // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n\n          newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n          this.handlePayload(newToken, payload); // TODO: optimize NOOP in case there are no special groups?\n\n          if (group === false) {\n            matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength; // TODO: with newlines the column may be assigned twice\n\n        column = this.computeNewColumn(column, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          var numOfLTsInMatch = 0;\n          var foundTerminator = void 0;\n          var lastLTEndOffset = void 0;\n          lineTerminatorPattern.lastIndex = 0;\n\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset;\n            this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n          }\n        } // will be NOOP if no modes present\n\n\n        this.handleModes(currConfig, pop_mode, push_mode, newToken);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        var errorStartOffset = offset;\n        var errorLine = line;\n        var errorColumn = column;\n        var foundResyncPoint = false;\n\n        while (!foundResyncPoint && offset < orgLength) {\n          // drop chars until we succeed in matching something\n          droppedChar = orgText.charCodeAt(offset); // Identity Func (when sticky flag is enabled)\n\n          text = this.chopInput(text, 1);\n          offset++;\n\n          for (j = 0; j < currModePatternsLength; j++) {\n            var currConfig_1 = patternIdxToConfig[j];\n            var currPattern = currConfig_1.pattern; // manually in-lined because > 600 chars won't be in-lined in V8\n\n            var singleCharCode = currConfig_1.short;\n\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig_1.isCustom === true) {\n              foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n            } else {\n              this.updateLastIndex(currPattern, offset);\n              foundResyncPoint = currPattern.exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset; // at this point we either re-synced or reached the end of the input text\n\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg\n        });\n      }\n    } // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n\n\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors\n    };\n  };\n\n  Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      var pushMode = config.push;\n      pop_mode(newToken);\n\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  };\n\n  Lexer.prototype.chopInput = function (text, length) {\n    return text.substring(length);\n  };\n\n  Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n    regExp.lastIndex = newLastIndex;\n  }; // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n\n\n  Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n    var lastCharIsLT, fixForEndingInLT;\n\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT; // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      } // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n\n    }\n  };\n\n  Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n    return oldColumn + imageLength;\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.createTokenInstance = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      startLine: startLine,\n      startColumn: startColumn,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine: startLine,\n      endLine: startLine,\n      startColumn: startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {\n    return 666;\n  };\n\n  Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n    tokenVector.push(tokenToAdd);\n    return index;\n  };\n\n  Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }; // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.handlePayload = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadNoCustom = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  };\n  /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n\n\n  Lexer.prototype.match = function (pattern, text, offset) {\n    return null;\n  };\n\n  Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n    var found = pattern.test(text);\n\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.matchWithExec = function (pattern, text) {\n    var regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : regExpArray;\n  }; // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n\n\n  Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = (0, utils_1.timer)(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" + \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer.NA = /NOT_APPLICABLE/;\n  return Lexer;\n}();\n\nexports.Lexer = Lexer;","map":{"version":3,"mappings":"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","names":["LexerDefinitionErrorType","exports","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","positionTracking","lineTerminatorsPattern","lineTerminatorCharacters","ensureOptimizations","safeMode","errorMessageProvider","lexer_errors_public_1","traceInitPerf","skipValidations","Object","freeze","lexerDefinition","config","undefined","Error","traceInitVal","traceInitMaxIdent","Infinity","traceInitIndent","TRACE_INIT","actualDefinition","hasOnlySingleMode","_this","lexer_1","trackStartLines","test","trackEndLines","modes","lexerDefinitionErrors","concat","lexerDefinitionWarning","currModeValue","currModeName","currTokType","allModeNames","currModDef","currModName","push","currAnalyzeResult_1","tracer","bind","patternIdxToConfig","charCodeToPatternIdxToConfig","emptyGroups","hasCustom","canModeBeOptimized","canBeOptimized","defaultMode","allErrMessages","error","message","allErrMessagesString","join","warningDescriptor","chopInput","utils_1","match","matchWithTest","updateLastIndex","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","Lexer","text","initialMode","lexResult","tokenizeInternal","i","j","k","matchAltImage","longerAlt","matchedImage","payload","altPayload","imageLength","group","tokType","newToken","errLength","droppedChar","msg","orgText","orgLength","length","offset","matchedTokensIndex","guessedNumberOfTokens","Math","floor","matchedTokens","Array","errors","line","column","groups","trackLines","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","charCode","optimizedCharIdx","possiblePatterns","pop_mode","popToken","tokenType","PUSH_MODE","msg_1","buildUnableToPopLexerModeMessage","startOffset","startLine","startColumn","image","pop","newMode","modeCanBeOptimized","push_mode","call","currConfig","nextCharCode","charCodeAt","chosenPatternIdxToConfig","chosenPatternsLength","currPattern","pattern","singleCharCode","short","isCustom","exec","longerAltLength","longerAltConfig","longerAltPattern","tokenTypeIdx","canLineTerminator","numOfLTsInMatch","foundTerminator","lastLTEndOffset","lastIndex","errorStartOffset","errorLine","errorColumn","foundResyncPoint","currConfig_1","buildUnexpectedCharactersMessage","tokens","pushMode","substring","regExp","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","args","endOffset","tokenVector","index","tokenToAdd","token","found","regExpArray","phaseDesc","phaseImpl","indent","console","log","time","value","traceMethod","warn"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/scan/lexer_public.ts"],"sourcesContent":["import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns\n} from \"./lexer\"\nimport {\n  cloneArr,\n  cloneObj,\n  forEach,\n  IDENTITY,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  merge,\n  NOOP,\n  PRINT_WARNING,\n  reduce,\n  reject,\n  timer,\n  toFastProperties\n} from \"@chevrotain/utils\"\nimport { augmentTokenTypes } from \"./tokens\"\nimport {\n  CustomPatternMatcherFunc,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType\n} from \"@chevrotain/types\"\nimport { defaultLexerErrorProvider } from \"../scan/lexer_errors_public\"\nimport { clearRegExpParserCache } from \"./reg_exp_parser\"\n\nexport interface ILexingResult {\n  tokens: IToken[]\n  groups: { [groupName: string]: IToken[] }\n  errors: ILexingError[]\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc\n}\n\nconst DEFAULT_LEXER_CONFIG: ILexerConfig = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false\n}\n\nObject.freeze(DEFAULT_LEXER_CONFIG)\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\"\n\n  public static NA = /NOT_APPLICABLE/\n  public lexerDefinitionErrors: ILexerDefinitionError[] = []\n  public lexerDefinitionWarning: ILexerDefinitionError[] = []\n\n  protected patternIdxToConfig: any = {}\n  protected charCodeToPatternIdxToConfig: any = {}\n\n  protected modes: string[] = []\n  protected defaultMode: string\n  protected emptyGroups: { [groupName: string]: IToken } = {}\n\n  private config: ILexerConfig = undefined\n  private trackStartLines: boolean = true\n  private trackEndLines: boolean = true\n  private hasCustom: boolean = false\n  private canModeBeOptimized: any = {}\n\n  private traceInitPerf: boolean | number\n  private traceInitMaxIdent: number\n  private traceInitIndent: number\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\"\n      )\n    }\n\n    // todo: defaults func?\n    this.config = merge(DEFAULT_LEXER_CONFIG, config)\n\n    const traceInitVal = this.config.traceInitPerf\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity\n      this.traceInitPerf = true\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal\n      this.traceInitPerf = true\n    }\n    this.traceInitIndent = -1\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition: IMultiModeLexerDefinition\n      let hasOnlySingleMode = true\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\"\n            )\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.'\n          )\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking\n        )\n        this.trackEndLines = /full/i.test(this.config.positionTracking)\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = <any>{ modes: {} }\n          actualDefinition.modes[DEFAULT_MODE] = cloneArr(\n            <TokenType[]>lexerDefinition\n          )\n          actualDefinition[DEFAULT_MODE] = DEFAULT_MODE\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false\n          actualDefinition = cloneObj(\n            <IMultiModeLexerDefinition>lexerDefinition\n          )\n        }\n      })\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters\n            )\n          )\n        })\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters\n            )\n          )\n        })\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {}\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType)\n        )\n      })\n\n      const allModeNames = keys(actualDefinition.modes)\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName)\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(<TokenType[]>currModDef, allModeNames)\n                )\n              })\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef)\n\n              let currAnalyzeResult\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT.bind(this)\n                })\n              })\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig\n\n              this.emptyGroups = merge(\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups\n              )\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized\n            }\n          })\n        }\n      )\n\n      this.defaultMode = actualDefinition.defaultMode\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message\n        })\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\"\n        )\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString\n        )\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message)\n      })\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>IDENTITY\n          this.match = this.matchWithTest\n        } else {\n          this.updateLastIndex = NOOP\n          this.match = this.matchWithExec\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = NOOP\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = IDENTITY\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = NOOP\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`\n          )\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush\n          this.handlePayload = this.handlePayloadWithCustom\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess\n          this.handlePayload = this.handlePayloadNoCustom\n        }\n      })\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName)\n            }\n            return cannotBeOptimized\n          },\n          []\n        )\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \"\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\"\n          )\n        }\n      })\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache()\n      })\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this)\n      })\n    })\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message\n      })\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\"\n      )\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString\n      )\n    }\n\n    const lexResult = this.tokenizeInternal(text, initialMode)\n\n    return lexResult\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken,\n      errLength,\n      droppedChar,\n      msg,\n      match\n    const orgText = text\n    const orgLength = orgText.length\n    let offset = 0\n    let matchedTokensIndex = 0\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10)\n    const matchedTokens = new Array(guessedNumberOfTokens)\n    const errors: ILexingError[] = []\n    let line = this.trackStartLines ? 1 : undefined\n    let column = this.trackStartLines ? 1 : undefined\n    const groups: any = cloneEmptyGroups(this.emptyGroups)\n    const trackLines = this.trackStartLines\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern\n\n    let currModePatternsLength = 0\n    let patternIdxToConfig = []\n    let currCharCodeToPatternIdxToConfig = []\n\n    const modeStack = []\n\n    const emptyArray = []\n    Object.freeze(emptyArray)\n    let getPossiblePatterns = undefined\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig\n    }\n\n    function getPossiblePatternsOptimized(charCode) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode)\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx]\n      if (possiblePatterns === undefined) {\n        return emptyArray\n      } else {\n        return possiblePatterns\n      }\n    }\n\n    const pop_mode = (popToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken\n          )\n\n        errors.push({\n          offset: popToken.startOffset,\n          line:\n            popToken.startLine !== undefined ? popToken.startLine : undefined,\n          column:\n            popToken.startColumn !== undefined\n              ? popToken.startColumn\n              : undefined,\n          length: popToken.image.length,\n          message: msg\n        })\n      } else {\n        modeStack.pop()\n        const newMode = last(modeStack)\n        patternIdxToConfig = this.patternIdxToConfig[newMode]\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode]\n        currModePatternsLength = patternIdxToConfig.length\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow\n        }\n      }\n    }\n\n    function push_mode(newMode) {\n      modeStack.push(newMode)\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode]\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode]\n      currModePatternsLength = patternIdxToConfig.length\n\n      currModePatternsLength = patternIdxToConfig.length\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode)\n\n    let currConfig\n\n    while (offset < orgLength) {\n      matchedImage = null\n\n      const nextCharCode = orgText.charCodeAt(offset)\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode)\n      const chosenPatternsLength = chosenPatternIdxToConfig.length\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i]\n        const currPattern = currConfig.pattern\n        payload = null\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern\n          }\n        } else if (currConfig.isCustom === true) {\n          match = currPattern.exec(orgText, offset, matchedTokens, groups)\n          if (match !== null) {\n            matchedImage = match[0]\n            if (match.payload !== undefined) {\n              payload = match.payload\n            }\n          } else {\n            matchedImage = null\n          }\n        } else {\n          this.updateLastIndex(currPattern, offset)\n          matchedImage = this.match(currPattern, text, offset)\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]]\n              const longerAltPattern = longerAltConfig.pattern\n              altPayload = null\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = longerAltPattern.exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups\n                )\n                if (match !== null) {\n                  matchAltImage = match[0]\n                  if (match.payload !== undefined) {\n                    altPayload = match.payload\n                  }\n                } else {\n                  matchAltImage = null\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern, offset)\n                matchAltImage = this.match(longerAltPattern, text, offset)\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage\n                payload = altPayload\n                currConfig = longerAltConfig\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break\n              }\n            }\n          }\n          break\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length\n        group = currConfig.group\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength\n          )\n\n          this.handlePayload(newToken, payload)\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken\n            )\n          } else {\n            groups[group].push(newToken)\n          }\n        }\n        text = this.chopInput(text, imageLength)\n        offset = offset + imageLength\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column, imageLength)\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0\n          let foundTerminator\n          let lastLTEndOffset\n          lineTerminatorPattern.lastIndex = 0\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage)\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1\n              numOfLTsInMatch++\n            }\n          } while (foundTerminator === true)\n\n          if (numOfLTsInMatch !== 0) {\n            line = line + numOfLTsInMatch\n            column = imageLength - lastLTEndOffset\n            this.updateTokenEndLineColumnLocation(\n              newToken,\n              group,\n              lastLTEndOffset,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength\n            )\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken)\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset\n        const errorLine = line\n        const errorColumn = column\n        let foundResyncPoint = false\n        while (!foundResyncPoint && offset < orgLength) {\n          // drop chars until we succeed in matching something\n          droppedChar = orgText.charCodeAt(offset)\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1)\n          offset++\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j]\n            const currPattern = currConfig.pattern\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                currPattern.exec(orgText, offset, matchedTokens, groups) !==\n                null\n            } else {\n              this.updateLastIndex(currPattern, offset)\n              foundResyncPoint = currPattern.exec(text) !== null\n            }\n\n            if (foundResyncPoint === true) {\n              break\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn\n        )\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg\n        })\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors\n    }\n  }\n\n  private handleModes(config, pop_mode, push_mode, newToken) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push\n      pop_mode(newToken)\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode)\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push)\n    }\n  }\n\n  private chopInput(text, length): string {\n    return text.substring(length)\n  }\n\n  private updateLastIndex(regExp, newLastIndex): void {\n    regExp.lastIndex = newLastIndex\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken,\n    group,\n    lastLTIdx,\n    numOfLTsInMatch,\n    line,\n    column,\n    imageLength\n  ): void {\n    let lastCharIsLT, fixForEndingInLT\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1\n      fixForEndingInLT = lastCharIsLT ? -1 : 0\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn, imageLength) {\n    return oldColumn + imageLength\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance(...args: any[]): IToken {\n    return null\n  }\n\n  private createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType\n    }\n  }\n\n  private createStartOnlyToken(\n    image,\n    startOffset,\n    tokenTypeIdx,\n    tokenType,\n    startLine,\n    startColumn\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType\n    }\n  }\n\n  private createFullToken(\n    image,\n    startOffset,\n    tokenTypeIdx,\n    tokenType,\n    startLine,\n    startColumn,\n    imageLength\n  ) {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType\n    }\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken(tokenVector, index, tokenToAdd): number {\n    return 666\n  }\n\n  private addTokenUsingPush(tokenVector, index, tokenToAdd): number {\n    tokenVector.push(tokenToAdd)\n    return index\n  }\n\n  private addTokenUsingMemberAccess(tokenVector, index, tokenToAdd): number {\n    tokenVector[index] = tokenToAdd\n    index++\n    return index\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  /* istanbul ignore next - place holder */\n  private handlePayload(token: IToken, payload: any): void {}\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload\n    }\n  }\n\n  /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n  private match(pattern: RegExp, text: string, offset?: number): string {\n    return null\n  }\n\n  private matchWithTest(pattern: RegExp, text: string, offset: number): string {\n    const found = pattern.test(text)\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex)\n    }\n    return null\n  }\n\n  private matchWithExec(pattern, text): string {\n    const regExpArray = pattern.exec(text)\n    return regExpArray !== null ? regExpArray[0] : regExpArray\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT<T>(phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\")\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`)\n      }\n      const { time, value } = timer(phaseImpl)\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\n      }\n      this.traceInitIndent--\n      return value\n    } else {\n      return phaseImpl()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}