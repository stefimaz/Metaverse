{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceTracer = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\n\n\nvar PerformanceTracer =\n/** @class */\nfunction () {\n  function PerformanceTracer() {}\n\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if ((0, utils_1.has)(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  };\n\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = (0, utils_1.timer)(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  return PerformanceTracer;\n}();\n\nexports.PerformanceTracer = PerformanceTracer;","map":{"version":3,"mappings":";;;;;;;AACA;;AAEA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA,gCA4CC;;AAvCCA,gEAAsBC,MAAtB,EAA2C;AACzC,QAAI,iBAAIA,MAAJ,EAAY,eAAZ,CAAJ,EAAkC;AAChC,UAAMC,iBAAiB,GAAGD,MAAM,CAACE,aAAjC;AACA,UAAMC,aAAa,GAAG,OAAOF,iBAAP,KAA6B,QAAnD;AACA,WAAKG,iBAAL,GAAyBD,aAAa,GAC1BF,iBAD0B,GAElCI,QAFJ;AAGA,WAAKH,aAAL,GAAqBC,aAAa,GAC9BF,iBAAiB,GAAG,CADU,GAE9BA,iBAFJ;AAGD,KATD,MASO;AACL,WAAKG,iBAAL,GAAyB,CAAzB;AACA,WAAKF,aAAL,GAAqBI,+BAAsBJ,aAA3C;AACD;;AAED,SAAKK,eAAL,GAAuB,CAAC,CAAxB;AACD,GAhBD;;AAkBAR,qDAAmCS,SAAnC,EAAsDC,SAAtD,EAAwE;AACtE;AACA;AACA,QAAI,KAAKP,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,WAAKK,eAAL;AACA,UAAMG,MAAM,GAAG,IAAIC,KAAJ,CAAU,KAAKJ,eAAL,GAAuB,CAAjC,EAAoCK,IAApC,CAAyC,IAAzC,CAAf;;AACA,UAAI,KAAKL,eAAL,GAAuB,KAAKH,iBAAhC,EAAmD;AACjDS,eAAO,CAACC,GAAR,CAAeJ,MAAM,UAAN,GAAcF,SAAd,GAAuB,GAAtC;AACD;;AACK,eAAkB,mBAAMC,SAAN,CAAlB;AAAA,UAAEM,IAAI,UAAN;AAAA,UAAQC,KAAK,WAAb;AACN;;;AACA,UAAMC,WAAW,GAAGF,IAAI,GAAG,EAAP,GAAYF,OAAO,CAACK,IAApB,GAA2BL,OAAO,CAACC,GAAvD;;AACA,UAAI,KAAKP,eAAL,GAAuB,KAAKH,iBAAhC,EAAmD;AACjDa,mBAAW,CAAIP,MAAM,UAAN,GAAcF,SAAd,GAAuB,UAAvB,GAAkCO,IAAlC,GAAsC,IAA1C,CAAX;AACD;;AACD,WAAKR,eAAL;AACA,aAAOS,KAAP;AACD,KAdD,MAcO;AACL,aAAOP,SAAS,EAAhB;AACD;AACF,GApBD;;AAqBF;AAAC,CA5CD;;AAAaU","names":["PerformanceTracer","config","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","parser_1","traceInitIndent","phaseDesc","phaseImpl","indent","Array","join","console","log","time","value","traceMethod","warn","exports"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts"],"sourcesContent":["import { IParserConfig } from \"@chevrotain/types\"\nimport { has, timer } from \"@chevrotain/utils\"\nimport { MixedInParser } from \"./parser_traits\"\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number\n  traceInitMaxIdent: number\n  traceInitIndent: number\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf\n      const traceIsNumber = typeof userTraceInitPerf === \"number\"\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : userTraceInitPerf\n    } else {\n      this.traceInitMaxIdent = 0\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf\n    }\n\n    this.traceInitIndent = -1\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\")\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`)\n      }\n      const { time, value } = timer(phaseImpl)\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\n      }\n      this.traceInitIndent--\n      return value\n    } else {\n      return phaseImpl()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}