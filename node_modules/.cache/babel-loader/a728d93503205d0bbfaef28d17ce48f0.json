{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateGrammar = exports.resolveGrammar = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar resolver_1 = require(\"../resolver\");\n\nvar checks_1 = require(\"../checks\");\n\nvar errors_public_1 = require(\"../../errors_public\");\n\nfunction resolveGrammar(options) {\n  options = (0, utils_1.defaults)(options, {\n    errMsgProvider: errors_public_1.defaultGrammarResolverErrorProvider\n  });\n  var topRulesTable = {};\n  (0, utils_1.forEach)(options.rules, function (rule) {\n    topRulesTable[rule.name] = rule;\n  });\n  return (0, resolver_1.resolveGrammar)(topRulesTable, options.errMsgProvider);\n}\n\nexports.resolveGrammar = resolveGrammar;\n\nfunction validateGrammar(options) {\n  options = (0, utils_1.defaults)(options, {\n    errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider\n  });\n  return (0, checks_1.validateGrammar)(options.rules, options.maxLookahead, options.tokenTypes, options.errMsgProvider, options.grammarName);\n}\n\nexports.validateGrammar = validateGrammar;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AAYA,SAAgBA,cAAhB,CAA+BC,OAA/B,EAGC;AACCA,SAAO,GAAG,sBAASA,OAAT,EAAkB;AAC1BC,kBAAc,EAAEC;AADU,GAAlB,CAAV;AAIA,MAAMC,aAAa,GAAG,EAAtB;AACA,uBAAQH,OAAO,CAACI,KAAhB,EAAuB,UAACC,IAAD,EAAK;AAC1BF,iBAAa,CAACE,IAAI,CAACC,IAAN,CAAb,GAA2BD,IAA3B;AACD,GAFD;AAGA,SAAO,+BAAkBF,aAAlB,EAAiCH,OAAO,CAACC,cAAzC,CAAP;AACD;;AAbDM;;AAeA,SAAgBC,eAAhB,CAAgCR,OAAhC,EAMC;AACCA,SAAO,GAAG,sBAASA,OAAT,EAAkB;AAC1BC,kBAAc,EAAEC;AADU,GAAlB,CAAV;AAIA,SAAO,8BACLF,OAAO,CAACI,KADH,EAELJ,OAAO,CAACS,YAFH,EAGLT,OAAO,CAACU,UAHH,EAILV,OAAO,CAACC,cAJH,EAKLD,OAAO,CAACW,WALH,CAAP;AAOD;;AAlBDJ","names":["resolveGrammar","options","errMsgProvider","errors_public_1","topRulesTable","rules","rule","name","exports","validateGrammar","maxLookahead","tokenTypes","grammarName"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts"],"sourcesContent":["import { Rule } from \"./gast_public\"\n\nimport { defaults, forEach } from \"@chevrotain/utils\"\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver\"\nimport { validateGrammar as orgValidateGrammar } from \"../checks\"\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider\n} from \"../../errors_public\"\nimport { DslMethodsCollectorVisitor } from \"./gast\"\nimport { IProductionWithOccurrence, TokenType } from \"@chevrotain/types\"\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError\n} from \"../types\"\n\nexport function resolveGrammar(options: {\n  rules: Rule[]\n  errMsgProvider?: IGrammarResolverErrorMessageProvider\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider\n  })\n\n  const topRulesTable = {}\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule\n  })\n  return orgResolveGrammar(topRulesTable, options.errMsgProvider)\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[]\n  maxLookahead: number\n  tokenTypes: TokenType[]\n  grammarName: string\n  errMsgProvider: IGrammarValidatorErrorMessageProvider\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider\n  })\n\n  return orgValidateGrammar(\n    options.rules,\n    options.maxLookahead,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName\n  )\n}\n"]},"metadata":{},"sourceType":"script"}