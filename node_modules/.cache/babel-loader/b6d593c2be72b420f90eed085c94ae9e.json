{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.collectMethods = exports.DslMethodsCollectorVisitor = exports.getProductionDslName = exports.isBranchingProd = exports.isOptionalProd = exports.isSequenceProd = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar gast_public_1 = require(\"./gast_public\");\n\nvar gast_visitor_public_1 = require(\"./gast_visitor_public\");\n\nfunction isSequenceProd(prod) {\n  return prod instanceof gast_public_1.Alternative || prod instanceof gast_public_1.Option || prod instanceof gast_public_1.Repetition || prod instanceof gast_public_1.RepetitionMandatory || prod instanceof gast_public_1.RepetitionMandatoryWithSeparator || prod instanceof gast_public_1.RepetitionWithSeparator || prod instanceof gast_public_1.Terminal || prod instanceof gast_public_1.Rule;\n}\n\nexports.isSequenceProd = isSequenceProd;\n\nfunction isOptionalProd(prod, alreadyVisited) {\n  if (alreadyVisited === void 0) {\n    alreadyVisited = [];\n  }\n\n  var isDirectlyOptional = prod instanceof gast_public_1.Option || prod instanceof gast_public_1.Repetition || prod instanceof gast_public_1.RepetitionWithSeparator;\n\n  if (isDirectlyOptional) {\n    return true;\n  } // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n\n\n  if (prod instanceof gast_public_1.Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return (0, utils_1.some)(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof gast_public_1.NonTerminal && (0, utils_1.contains)(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof gast_public_1.AbstractProduction) {\n    if (prod instanceof gast_public_1.NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n\n    return (0, utils_1.every)(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else {\n    return false;\n  }\n}\n\nexports.isOptionalProd = isOptionalProd;\n\nfunction isBranchingProd(prod) {\n  return prod instanceof gast_public_1.Alternation;\n}\n\nexports.isBranchingProd = isBranchingProd;\n\nfunction getProductionDslName(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_public_1.NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof gast_public_1.Option) {\n    return \"OPTION\";\n  } else if (prod instanceof gast_public_1.Alternation) {\n    return \"OR\";\n  } else if (prod instanceof gast_public_1.RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof gast_public_1.RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof gast_public_1.Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof gast_public_1.Terminal) {\n    return \"CONSUME\";\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexports.getProductionDslName = getProductionDslName;\n\nvar DslMethodsCollectorVisitor =\n/** @class */\nfunction (_super) {\n  __extends(DslMethodsCollectorVisitor, _super);\n\n  function DslMethodsCollectorVisitor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // A minus is never valid in an identifier name\n\n\n    _this.separator = \"-\";\n    _this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n    return _this;\n  }\n\n  DslMethodsCollectorVisitor.prototype.reset = function () {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {\n    var key = terminal.terminalType.name + this.separator + \"Terminal\";\n\n    if (!(0, utils_1.has)(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n\n    this.dslMethods[key].push(terminal);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {\n    var key = subrule.nonTerminalName + this.separator + \"Terminal\";\n\n    if (!(0, utils_1.has)(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n\n    this.dslMethods[key].push(subrule);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitOption = function (option) {\n    this.dslMethods.option.push(option);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {\n    this.dslMethods.repetition.push(many);\n  };\n\n  DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {\n    this.dslMethods.alternation.push(or);\n  };\n\n  return DslMethodsCollectorVisitor;\n}(gast_visitor_public_1.GAstVisitor);\n\nexports.DslMethodsCollectorVisitor = DslMethodsCollectorVisitor;\nvar collectorVisitor = new DslMethodsCollectorVisitor();\n\nfunction collectMethods(rule) {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  var dslMethods = collectorVisitor.dslMethods; // avoid uncleaned references\n\n  collectorVisitor.reset();\n  return dslMethods;\n}\n\nexports.collectMethods = collectMethods;","map":{"version":3,"mappings":"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","names":["isSequenceProd","prod","gast_public_1","exports","isOptionalProd","alreadyVisited","isDirectlyOptional","definition","subProd","push","isBranchingProd","getProductionDslName","Error","__extends","_this","option","alternation","repetition","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","DslMethodsCollectorVisitor","dslMethods","terminal","key","terminalType","name","separator","subrule","nonTerminalName","manySep","atLeastOne","atLeastOneSep","many","or","gast_visitor_public_1","collectorVisitor","collectMethods","rule","reset","accept"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/parse/grammar/gast/gast.ts"],"sourcesContent":["import { contains, every, has, some } from \"@chevrotain/utils\"\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"./gast_public\"\nimport { GAstVisitor } from \"./gast_visitor_public\"\nimport { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\"\n\nexport function isSequenceProd(prod: IProduction): boolean {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  )\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = []\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator\n  if (isDirectlyOptional) {\n    return true\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited)\n    })\n  } else if (prod instanceof NonTerminal && contains(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod)\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited)\n      }\n    )\n  } else {\n    return false\n  }\n}\n\nexport function isBranchingProd(prod: IProduction): boolean {\n  return prod instanceof Alternation\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\"\n  } else if (prod instanceof Option) {\n    return \"OPTION\"\n  } else if (prod instanceof Alternation) {\n    return \"OR\"\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\"\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\"\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\"\n  } else if (prod instanceof Repetition) {\n    return \"MANY\"\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\"\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n\nexport class DslMethodsCollectorVisitor extends GAstVisitor {\n  // A minus is never valid in an identifier name\n  public separator = \"-\"\n  public dslMethods = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: []\n  }\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    }\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    const key = terminal.terminalType.name + this.separator + \"Terminal\"\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = []\n    }\n    this.dslMethods[key].push(terminal)\n  }\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    const key = subrule.nonTerminalName + this.separator + \"Terminal\"\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = []\n    }\n    this.dslMethods[key].push(subrule)\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option)\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep)\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne)\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep)\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many)\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or)\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor()\nexport function collectMethods(rule: Rule): {\n  option: Option[]\n  alternation: Alternation[]\n  repetition: Repetition[]\n  repetitionWithSeparator: RepetitionWithSeparator[]\n  repetitionMandatory: RepetitionMandatory[]\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator\n} {\n  collectorVisitor.reset()\n  rule.accept(collectorVisitor)\n  const dslMethods = collectorVisitor.dslMethods\n  // avoid uncleaned references\n  collectorVisitor.reset()\n  return <any>dslMethods\n}\n"]},"metadata":{},"sourceType":"script"}