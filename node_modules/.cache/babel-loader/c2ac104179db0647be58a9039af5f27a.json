{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestWalker = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar gast_public_1 = require(\"./gast/gast_public\");\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\n\n\nvar RestWalker =\n/** @class */\nfunction () {\n  function RestWalker() {}\n\n  RestWalker.prototype.walk = function (prod, prevRest) {\n    var _this = this;\n\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n\n    (0, utils_1.forEach)(prod.definition, function (subProd, index) {\n      var currRest = (0, utils_1.drop)(prod.definition, index + 1);\n      /* istanbul ignore else */\n\n      if (subProd instanceof gast_public_1.NonTerminal) {\n        _this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Terminal) {\n        _this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternative) {\n        _this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Option) {\n        _this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatory) {\n        _this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionMandatoryWithSeparator) {\n        _this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.RepetitionWithSeparator) {\n        _this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Repetition) {\n        _this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_public_1.Alternation) {\n        _this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  };\n\n  RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {};\n\n  RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {};\n\n  RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {\n    // ABCDEF => after the D the rest is EF\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, fullOrRest);\n  };\n\n  RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, fullOrRest);\n  };\n\n  RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    var fullAtLeastOneRest = [new gast_public_1.Option({\n      definition: atLeastOneProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  };\n\n  RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  };\n\n  RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    var fullManyRest = [new gast_public_1.Option({\n      definition: manyProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(manyProd, fullManyRest);\n  };\n\n  RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n    this.walk(manySepProd, fullManySepRest);\n  };\n\n  RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {\n    var _this = this; // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n\n\n    var fullOrRest = currRest.concat(prevRest); // walk all different alternatives\n\n    (0, utils_1.forEach)(orProd.definition, function (alt) {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      var prodWrapper = new gast_public_1.Alternative({\n        definition: [alt]\n      });\n\n      _this.walk(prodWrapper, fullOrRest);\n    });\n  };\n\n  return RestWalker;\n}();\n\nexports.RestWalker = RestWalker;\n\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  var repSepRest = [new gast_public_1.Option({\n    definition: [new gast_public_1.Terminal({\n      terminalType: repSepProd.separator\n    })].concat(repSepProd.definition)\n  })];\n  var fullRepSepRest = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}","map":{"version":3,"mappings":"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","names":["RestWalker","prod","prevRest","definition","subProd","index","currRest","gast_public_1","_this","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","Error","terminal","refProd","flatProd","fullOrRest","concat","walk","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","exports","repSepProd","repSepRest","terminalType","separator","fullRepSepRest"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/parse/grammar/rest.ts"],"sourcesContent":["import { drop, forEach } from \"@chevrotain/utils\"\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal\n} from \"./gast/gast_public\"\nimport { IProduction } from \"@chevrotain/types\"\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: AbstractProduction, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1)\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest)\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest)\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest)\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest)\n      } else {\n        throw Error(\"non exhaustive match\")\n      }\n    })\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(flatProd, <any>fullOrRest)\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(optionProd, <any>fullOrRest)\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(atLeastOneProd, fullAtLeastOneRest)\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest)\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(manyProd, fullManyRest)\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(manySepProd, fullManySepRest)\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest)\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] })\n      this.walk(prodWrapper, <any>fullOrRest)\n    })\n  }\n}\n\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  const repSepRest = [\n    new Option({\n      definition: [new Terminal({ terminalType: repSepProd.separator })].concat(\n        repSepProd.definition\n      )\n    })\n  ]\n  const fullRepSepRest: IProduction[] = repSepRest.concat(\n    <any>currRest,\n    <any>prevRest\n  )\n  return fullRepSepRest\n}\n"]},"metadata":{},"sourceType":"script"}