{"ast":null,"code":"import { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor() {\n    let gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(_ref => {\n        let {\n          profile,\n          assetPath\n        } = _ref;\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"names":["Object3D","SphereGeometry","MeshBasicMaterial","Mesh","GLTFLoader","fetchProfile","MotionController","MotionControllerConstants","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","XRControllerModel","constructor","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","value","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","path","_assetCache","createControllerModel","controller","addEventListener","event","xrInputSource","data","targetRayMode","gamepad","then","profile","assetPath","cachedAsset","assetUrl","clone","Error","setPath","load","asset","catch","err","remove"],"mappings":"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","sourcesContent":["import { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };\n"]},"metadata":{},"sourceType":"module"}