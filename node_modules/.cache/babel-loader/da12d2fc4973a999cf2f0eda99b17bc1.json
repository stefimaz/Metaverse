{"ast":null,"code":"import { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, this.path, xrInputSource.handedness);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.clear();\n      this.motionController = null;\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n}\n\nexport { OculusHandModel };","map":{"version":3,"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/three-stdlib/webxr/OculusHandModel.js"],"names":["Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","constructor","controller","motionController","envMap","mesh","addEventListener","event","xrInputSource","data","hand","path","handedness","clear","updateMatrixWorld","force","updateMesh","getPointerPosition","indexFingerTip","joints","position","intersectBoxObject","boxObject","pointerPosition","indexSphere","box","setFromObject","intersectsBox","checkButton","button","onPress","onClear","isPressed","whilePressed"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,IAA3B,QAAuC,OAAvC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,MAAMC,YAAY,GAAG,IAArB;AACA,MAAMC,cAAc,GAAG,kBAAvB;;AAEA,MAAMC,eAAN,SAA8BN,QAA9B,CAAuC;AACrCO,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB;AACA,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,IAAL,GAAY,IAAZ;AACAH,IAAAA,UAAU,CAACI,gBAAX,CAA4B,WAA5B,EAAyCC,KAAK,IAAI;AAChD,YAAMC,aAAa,GAAGD,KAAK,CAACE,IAA5B;;AAEA,UAAID,aAAa,CAACE,IAAd,IAAsB,CAAC,KAAKP,gBAAhC,EAAkD;AAChD,aAAKK,aAAL,GAAqBA,aAArB;AACA,aAAKL,gBAAL,GAAwB,IAAIN,eAAJ,CAAoB,IAApB,EAA0BK,UAA1B,EAAsC,KAAKS,IAA3C,EAAiDH,aAAa,CAACI,UAA/D,CAAxB;AACD;AACF,KAPD;AAQAV,IAAAA,UAAU,CAACI,gBAAX,CAA4B,cAA5B,EAA4C,MAAM;AAChD,WAAKO,KAAL;AACA,WAAKV,gBAAL,GAAwB,IAAxB;AACD,KAHD;AAID;;AAEDW,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACvB,UAAMD,iBAAN,CAAwBC,KAAxB;;AAEA,QAAI,KAAKZ,gBAAT,EAA2B;AACzB,WAAKA,gBAAL,CAAsBa,UAAtB;AACD;AACF;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,cAAc,GAAG,KAAKhB,UAAL,CAAgBiB,MAAhB,CAAuBpB,cAAvB,CAAvB;;AAEA,QAAImB,cAAJ,EAAoB;AAClB,aAAOA,cAAc,CAACE,QAAtB;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAMC,eAAe,GAAG,KAAKN,kBAAL,EAAxB;;AAEA,QAAIM,eAAJ,EAAqB;AACnB,YAAMC,WAAW,GAAG,IAAI7B,MAAJ,CAAW4B,eAAX,EAA4BzB,YAA5B,CAApB;AACA,YAAM2B,GAAG,GAAG,IAAI7B,IAAJ,GAAW8B,aAAX,CAAyBJ,SAAzB,CAAZ;AACA,aAAOE,WAAW,CAACG,aAAZ,CAA0BF,GAA1B,CAAP;AACD,KAJD,MAIO;AACL,aAAO,KAAP;AACD;AACF;;AAEDG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,QAAI,KAAKR,kBAAL,CAAwBQ,MAAxB,CAAJ,EAAqC;AACnCA,MAAAA,MAAM,CAACC,OAAP;AACD,KAFD,MAEO;AACLD,MAAAA,MAAM,CAACE,OAAP;AACD;;AAED,QAAIF,MAAM,CAACG,SAAP,EAAJ,EAAwB;AACtBH,MAAAA,MAAM,CAACI,YAAP;AACD;AACF;;AA7DoC;;AAiEvC,SAASjC,eAAT","sourcesContent":["import { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, this.path, xrInputSource.handedness);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.clear();\n      this.motionController = null;\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n}\n\nexport { OculusHandModel };\n"]},"metadata":{},"sourceType":"module"}