{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\n\nfunction defaultVisit(ctx, param) {\n  var childrenNames = (0, utils_1.keys)(ctx);\n  var childrenNamesLength = childrenNames.length;\n\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j]; // distinction between Tokens Children and CstNode children\n\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  } // defaultVisit does not support generic out param\n\n\n  return undefined;\n}\n\nexports.defaultVisit = defaultVisit;\n\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if ((0, utils_1.isArray)(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      } // enables passing optional CstNodes concisely.\n\n\n      if ((0, utils_1.isUndefined)(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function () {\n      var semanticDefinitionErrors = validateVisitor(this, ruleNames);\n\n      if (!(0, utils_1.isEmpty)(semanticDefinitionErrors)) {\n        var errorMessages = (0, utils_1.map)(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\" + (0, lang_extensions_1.functionName)(this.constructor) + \">:\\n\\t\" + (\"\" + errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\n\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\n\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function () {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  (0, utils_1.forEach)(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\n\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\n\nfunction validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\n\nexports.validateVisitor = validateVisitor;\n\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var errors = (0, utils_1.map)(ruleNames, function (currRuleName) {\n    if (!(0, utils_1.isFunction)(visitorInstance[currRuleName])) {\n      return {\n        msg: \"Missing visitor method: <\" + currRuleName + \"> on \" + (0, lang_extensions_1.functionName)(visitorInstance.constructor) + \" CST Visitor.\",\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    }\n  });\n  return (0, utils_1.compact)(errors);\n}\n\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\n\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n\n  for (var prop in visitorInstance) {\n    if ((0, utils_1.isFunction)(visitorInstance[prop]) && !(0, utils_1.contains)(VALID_PROP_NAMES, prop) && !(0, utils_1.contains)(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\" + prop + \"> on \" + (0, lang_extensions_1.functionName)(visitorInstance.constructor) + \" CST Visitor\\n\" + \"There is no Grammar Rule corresponding to this method's name.\\n\",\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n\n  return errors;\n}\n\nexports.validateRedundantMethods = validateRedundantMethods;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAWA;;AAGA,SAAgBA,YAAhB,CAAsCC,GAAtC,EAAgDC,KAAhD,EAAyD;AACvD,MAAMC,aAAa,GAAG,kBAAKF,GAAL,CAAtB;AACA,MAAMG,mBAAmB,GAAGD,aAAa,CAACE,MAA1C;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,mBAApB,EAAyCE,CAAC,EAA1C,EAA8C;AAC5C,QAAMC,aAAa,GAAGJ,aAAa,CAACG,CAAD,CAAnC;AACA,QAAME,cAAc,GAAGP,GAAG,CAACM,aAAD,CAA1B;AACA,QAAME,oBAAoB,GAAGD,cAAc,CAACH,MAA5C;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,oBAApB,EAA0CC,CAAC,EAA3C,EAA+C;AAC7C,UAAMC,SAAS,GAAQH,cAAc,CAACE,CAAD,CAArC,CAD6C,CAE7C;;AACA,UAAIC,SAAS,CAACC,YAAV,KAA2BC,SAA/B,EAA0C;AACxC,aAAKF,SAAS,CAACG,IAAf,EAAqBH,SAAS,CAACI,QAA/B,EAAyCb,KAAzC;AACD;AACF;AACF,GAdsD,CAevD;;;AACA,SAAOW,SAAP;AACD;;AAjBDG;;AAmBA,SAAgBC,oCAAhB,CACEC,WADF,EAEEC,SAFF,EAEqB;AAInB,MAAMC,kBAAkB,GAAQ,aAAc,CAA9C,CAJmB,CAMnB;AACA;AACA;;;AACA,wCAAeA,kBAAf,EAAmCF,WAAW,GAAG,eAAjD;AAEA,MAAMG,aAAa,GAAG;AACpBC,SAAK,EAAE,UAAUC,OAAV,EAAmBrB,KAAnB,EAAwB;AAC7B;AACA,UAAI,qBAAQqB,OAAR,CAAJ,EAAsB;AACpB;AACA;AACAA,eAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AACD,OAN4B,CAQ7B;;;AACA,UAAI,yBAAYA,OAAZ,CAAJ,EAA0B;AACxB,eAAOV,SAAP;AACD;;AAED,aAAO,KAAKU,OAAO,CAACT,IAAb,EAAmBS,OAAO,CAACR,QAA3B,EAAqCb,KAArC,CAAP;AACD,KAfmB;AAiBpBsB,mBAAe,EAAE;AACf,UAAMC,wBAAwB,GAAGD,eAAe,CAAC,IAAD,EAAOL,SAAP,CAAhD;;AACA,UAAI,CAAC,qBAAQM,wBAAR,CAAL,EAAwC;AACtC,YAAMC,aAAa,GAAG,iBACpBD,wBADoB,EAEpB,UAACE,YAAD,EAAa;AAAK,6BAAY,CAACC,GAAb;AAAgB,SAFd,CAAtB;AAIA,cAAMC,KAAK,CACT,qCAAmC,oCACjC,KAAKC,WAD4B,CAAnC,GAEC,QAFD,IAEY,KAAGJ,aAAa,CAACK,IAAd,CAAmB,MAAnB,EAA2BC,OAA3B,CAAmC,KAAnC,EAA0C,MAA1C,CAFf,CADS,CAAX;AAKD;AACF;AA9BmB,GAAtB;AAiCAZ,oBAAkB,CAACa,SAAnB,GAA+BZ,aAA/B;AACAD,oBAAkB,CAACa,SAAnB,CAA6BH,WAA7B,GAA2CV,kBAA3C;AAEAA,oBAAkB,CAACc,WAAnB,GAAiCf,SAAjC;AAEA,SAAOC,kBAAP;AACD;;AApDDJ;;AAsDA,SAAgBmB,wCAAhB,CACEjB,WADF,EAEEC,SAFF,EAGEiB,eAHF,EAG2B;AAIzB,MAAMhB,kBAAkB,GAAQ,aAAc,CAA9C,CAJyB,CAMzB;AACA;AACA;;;AACA,wCAAeA,kBAAf,EAAmCF,WAAW,GAAG,2BAAjD;AAEA,MAAMmB,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcH,eAAe,CAACH,SAA9B,CAA1B;AACA,uBAAQd,SAAR,EAAmB,UAACqB,QAAD,EAAS;AAC1BH,qBAAiB,CAACG,QAAD,CAAjB,GAA8BxC,YAA9B;AACD,GAFD;AAIAoB,oBAAkB,CAACa,SAAnB,GAA+BI,iBAA/B;AACAjB,oBAAkB,CAACa,SAAnB,CAA6BH,WAA7B,GAA2CV,kBAA3C;AAEA,SAAOA,kBAAP;AACD;;AAvBDJ;AAyBA,IAAYyB,yBAAZ;;AAAA,WAAYA,yBAAZ,EAAqC;AACnCA;AACAA;AACD,CAHD,EAAYA,yBAAyB,GAAzBzB,0EAAyB,EAAzB,CAAZ;;AAWA,SAAgBQ,eAAhB,CACEkB,eADF,EAEEvB,SAFF,EAEqB;AAEnB,MAAMwB,aAAa,GAAGC,yBAAyB,CAACF,eAAD,EAAkBvB,SAAlB,CAA/C;AACA,MAAM0B,eAAe,GAAGC,wBAAwB,CAACJ,eAAD,EAAkBvB,SAAlB,CAAhD;AAEA,SAAOwB,aAAa,CAACI,MAAd,CAAqBF,eAArB,CAAP;AACD;;AARD7B;;AAUA,SAAgB4B,yBAAhB,CACEF,eADF,EAEEvB,SAFF,EAEqB;AAEnB,MAAM6B,MAAM,GAA8B,iBAAI7B,SAAJ,EAAe,UAAC8B,YAAD,EAAa;AACpE,QAAI,CAAC,wBAAWP,eAAe,CAACO,YAAD,CAA1B,CAAL,EAAgD;AAC9C,aAAO;AACLrB,WAAG,EAAE,8BAA4BqB,YAA5B,GAAwC,OAAxC,GAAgD,oCAC9CP,eAAe,CAACZ,WAD8B,CAAhD,GAEJ,eAHI;AAILoB,YAAI,EAAET,yBAAyB,CAACU,cAJ3B;AAKLC,kBAAU,EAAEH;AALP,OAAP;AAOD;AACF,GAVyC,CAA1C;AAYA,SAAO,qBAAiCD,MAAjC,CAAP;AACD;;AAjBDhC;AAmBA,IAAMqC,gBAAgB,GAAG,CAAC,aAAD,EAAgB,OAAhB,EAAyB,iBAAzB,CAAzB;;AACA,SAAgBP,wBAAhB,CACEJ,eADF,EAEEvB,SAFF,EAEqB;AAEnB,MAAM6B,MAAM,GAAG,EAAf;;AAEA,OAAK,IAAMM,IAAX,IAAmBZ,eAAnB,EAAoC;AAClC,QACE,wBAAWA,eAAe,CAACY,IAAD,CAA1B,KACA,CAAC,sBAASD,gBAAT,EAA2BC,IAA3B,CADD,IAEA,CAAC,sBAASnC,SAAT,EAAoBmC,IAApB,CAHH,EAIE;AACAN,YAAM,CAACO,IAAP,CAAY;AACV3B,WAAG,EACD,gCAA8B0B,IAA9B,GAAkC,OAAlC,GAA0C,oCACnCZ,eAAe,CAACZ,WADmB,CAA1C,GAEC,gBAFD,GAGA,iEALQ;AAMVoB,YAAI,EAAET,yBAAyB,CAACe,gBANtB;AAOVJ,kBAAU,EAAEE;AAPF,OAAZ;AASD;AACF;;AACD,SAAON,MAAP;AACD;;AAxBDhC","names":["defaultVisit","ctx","param","childrenNames","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","name","children","exports","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","semanticProto","visit","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","msg","Error","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","redundantErrors","validateRedundantMethods","concat","errors","currRuleName","type","MISSING_METHOD","methodName","VALID_PROP_NAMES","prop","push","REDUNDANT_METHOD"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/parse/cst/cst_visitor.ts"],"sourcesContent":["import {\n  compact,\n  contains,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map\n} from \"@chevrotain/utils\"\nimport { defineNameProp, functionName } from \"../../lang/lang_extensions\"\nimport { ICstVisitor } from \"@chevrotain/types\"\n\nexport function defaultVisit<IN, OUT>(ctx: any, param: IN): OUT {\n  const childrenNames = keys(ctx)\n  const childrenNamesLength = childrenNames.length\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i]\n    const currChildArray = ctx[currChildName]\n    const currChildArrayLength = currChildArray.length\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j]\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param)\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n  return undefined\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[]\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\")\n\n  const semanticProto = {\n    visit: function (cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0]\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined\n      }\n\n      return this[cstNode.name](cstNode.children, param)\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames)\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg\n        )\n        throw Error(\n          `Errors Detected in CST Visitor <${functionName(\n            this.constructor\n          )}>:\\n\\t` + `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`\n        )\n      }\n    }\n  }\n\n  derivedConstructor.prototype = semanticProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  derivedConstructor._RULE_NAMES = ruleNames\n\n  return derivedConstructor\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function\n): {\n  new (...args: any[]): ICstVisitor<any, any>\n} {\n  const derivedConstructor: any = function () {}\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\")\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype)\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit\n  })\n\n  derivedConstructor.prototype = withDefaultsProto\n  derivedConstructor.prototype.constructor = derivedConstructor\n\n  return derivedConstructor\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string\n  type: CstVisitorDefinitionError\n  methodName: string\n}\n\nexport function validateVisitor(\n  visitorInstance: Function,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames)\n  const redundantErrors = validateRedundantMethods(visitorInstance, ruleNames)\n\n  return missingErrors.concat(redundantErrors)\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: Function,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const errors: IVisitorDefinitionError[] = map(ruleNames, (currRuleName) => {\n    if (!isFunction(visitorInstance[currRuleName])) {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${functionName(\n          <any>visitorInstance.constructor\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      }\n    }\n  })\n\n  return compact<IVisitorDefinitionError>(errors)\n}\n\nconst VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"]\nexport function validateRedundantMethods(\n  visitorInstance: Function,\n  ruleNames: string[]\n): IVisitorDefinitionError[] {\n  const errors = []\n\n  for (const prop in visitorInstance) {\n    if (\n      isFunction(visitorInstance[prop]) &&\n      !contains(VALID_PROP_NAMES, prop) &&\n      !contains(ruleNames, prop)\n    ) {\n      errors.push({\n        msg:\n          `Redundant visitor method: <${prop}> on ${functionName(\n            <any>visitorInstance.constructor\n          )} CST Visitor\\n` +\n          `There is no Grammar Rule corresponding to this method's name.\\n`,\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      })\n    }\n  }\n  return errors\n}\n"]},"metadata":{},"sourceType":"script"}