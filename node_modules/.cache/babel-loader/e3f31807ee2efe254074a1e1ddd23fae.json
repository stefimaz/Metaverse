{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addNoneTerminalToCst = exports.addTerminalToCst = exports.setNodeLocationFull = exports.setNodeLocationOnlyOffset = void 0;\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\n\nfunction setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  } // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\nexports.setNodeLocationOnlyOffset = setNodeLocationOnlyOffset;\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\n\nfunction setNodeLocationFull(currNodeLocation, newLocationInfo) {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  } // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexports.setNodeLocationFull = setNodeLocationFull;\n\nfunction addTerminalToCst(node, token, tokenTypeName) {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexports.addTerminalToCst = addTerminalToCst;\n\nfunction addNoneTerminalToCst(node, ruleName, ruleResult) {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n\nexports.addNoneTerminalToCst = addNoneTerminalToCst;","map":{"version":3,"mappings":";;;;;;AAEA;;;;;;;;AAOA,SAAgBA,yBAAhB,CACEC,gBADF,EAEEC,eAFF,EAEyB;AAEvB;AACA,MAAIC,KAAK,CAACF,gBAAgB,CAACG,WAAlB,CAAL,KAAwC,IAA5C,EAAkD;AAChD;AACA;AACA;AACAH,oBAAgB,CAACG,WAAjB,GAA+BF,eAAe,CAACE,WAA/C;AACAH,oBAAgB,CAACI,SAAjB,GAA6BH,eAAe,CAACG,SAA7C;AACD,GAND,CAOA;AACA;AACA;AACA;AAVA,OAWK,IAAIJ,gBAAgB,CAACI,SAAjB,GAA6BH,eAAe,CAACG,SAA7C,KAA2D,IAA/D,EAAqE;AACxEJ,oBAAgB,CAACI,SAAjB,GAA6BH,eAAe,CAACG,SAA7C;AACD;AACF;;AAnBDC;AAqBA;;;;;;;;AAOA,SAAgBC,mBAAhB,CACEN,gBADF,EAEEC,eAFF,EAEkC;AAEhC;AACA,MAAIC,KAAK,CAACF,gBAAgB,CAACG,WAAlB,CAAL,KAAwC,IAA5C,EAAkD;AAChD;AACA;AACA;AACAH,oBAAgB,CAACG,WAAjB,GAA+BF,eAAe,CAACE,WAA/C;AACAH,oBAAgB,CAACO,WAAjB,GAA+BN,eAAe,CAACM,WAA/C;AACAP,oBAAgB,CAACQ,SAAjB,GAA6BP,eAAe,CAACO,SAA7C;AACAR,oBAAgB,CAACI,SAAjB,GAA6BH,eAAe,CAACG,SAA7C;AACAJ,oBAAgB,CAACS,SAAjB,GAA6BR,eAAe,CAACQ,SAA7C;AACAT,oBAAgB,CAACU,OAAjB,GAA2BT,eAAe,CAACS,OAA3C;AACD,GAVD,CAWA;AACA;AACA;AACA;AAdA,OAeK,IAAIV,gBAAgB,CAACI,SAAjB,GAA6BH,eAAe,CAACG,SAA7C,KAA2D,IAA/D,EAAqE;AACxEJ,oBAAgB,CAACI,SAAjB,GAA6BH,eAAe,CAACG,SAA7C;AACAJ,oBAAgB,CAACS,SAAjB,GAA6BR,eAAe,CAACQ,SAA7C;AACAT,oBAAgB,CAACU,OAAjB,GAA2BT,eAAe,CAACS,OAA3C;AACD;AACF;;AAzBDL;;AA2BA,SAAgBM,gBAAhB,CACEC,IADF,EAEEC,KAFF,EAGEC,aAHF,EAGuB;AAErB,MAAIF,IAAI,CAACG,QAAL,CAAcD,aAAd,MAAiCE,SAArC,EAAgD;AAC9CJ,QAAI,CAACG,QAAL,CAAcD,aAAd,IAA+B,CAACD,KAAD,CAA/B;AACD,GAFD,MAEO;AACLD,QAAI,CAACG,QAAL,CAAcD,aAAd,EAA6BG,IAA7B,CAAkCJ,KAAlC;AACD;AACF;;AAVDR;;AAYA,SAAgBa,oBAAhB,CACEN,IADF,EAEEO,QAFF,EAGEC,UAHF,EAGiB;AAEf,MAAIR,IAAI,CAACG,QAAL,CAAcI,QAAd,MAA4BH,SAAhC,EAA2C;AACzCJ,QAAI,CAACG,QAAL,CAAcI,QAAd,IAA0B,CAACC,UAAD,CAA1B;AACD,GAFD,MAEO;AACLR,QAAI,CAACG,QAAL,CAAcI,QAAd,EAAwBF,IAAxB,CAA6BG,UAA7B;AACD;AACF;;AAVDf","names":["setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","startOffset","endOffset","exports","setNodeLocationFull","startColumn","startLine","endColumn","endLine","addTerminalToCst","node","token","tokenTypeName","children","undefined","push","addNoneTerminalToCst","ruleName","ruleResult"],"sources":["/Users/stephanemasyn/Desktop/FinTech/GitHub/Metaverse/node_modules/chevrotain/src/parse/cst/cst.ts"],"sourcesContent":["import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\"\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: IToken\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset\n    currNodeLocation.endOffset = newLocationInfo.endOffset\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset\n    currNodeLocation.startColumn = newLocationInfo.startColumn\n    currNodeLocation.startLine = newLocationInfo.startLine\n    currNodeLocation.endOffset = newLocationInfo.endOffset\n    currNodeLocation.endColumn = newLocationInfo.endColumn\n    currNodeLocation.endLine = newLocationInfo.endLine\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset\n    currNodeLocation.endColumn = newLocationInfo.endColumn\n    currNodeLocation.endLine = newLocationInfo.endLine\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token]\n  } else {\n    node.children[tokenTypeName].push(token)\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult]\n  } else {\n    node.children[ruleName].push(ruleResult)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}